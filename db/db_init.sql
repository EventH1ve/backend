-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.administrator
(
    id integer NOT NULL DEFAULT nextval('administrator_id_seq'::regclass),
    userid integer NOT NULL,
    orgid integer NOT NULL,
    CONSTRAINT administrator_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.attendee
(
    id integer NOT NULL DEFAULT nextval('attendee_id_seq'::regclass),
    userid integer NOT NULL,
    CONSTRAINT attendee_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.contactperson
(
    id integer NOT NULL DEFAULT nextval('contactperson_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    phonenumber character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT contactperson_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventfeedback
(
    id integer NOT NULL DEFAULT nextval('eventfeedback_id_seq'::regclass),
    "attendeeID" integer NOT NULL,
    eventid integer NOT NULL,
    feedbackrating integer,
    feedbackdescription character varying COLLATE pg_catalog."default",
    CONSTRAINT eventfeedback_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventhost
(
    id integer NOT NULL DEFAULT nextval('eventhost_id_seq'::regclass),
    hostid integer NOT NULL,
    eventid integer NOT NULL,
    CONSTRAINT eventhost_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id integer NOT NULL DEFAULT nextval('events_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default",
    type integer,
    status integer,
    overallrating double precision DEFAULT 0,
    creationdate timestamp with time zone,
    registrationstartdatetime timestamp with time zone,
    registrationenddatetime timestamp with time zone,
    eventstartdatetime timestamp with time zone,
    eventenddatetime timestamp with time zone,
    "seatsConfigration" json,
    CONSTRAINT events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventstatus
(
    id integer NOT NULL DEFAULT nextval('eventstatus_id_seq'::regclass),
    status character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT eventstatus_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventticketcapacity
(
    id integer NOT NULL DEFAULT nextval('eventticketcapacity_id_seq'::regclass),
    eventid integer NOT NULL,
    tickettype integer NOT NULL,
    capacity integer NOT NULL,
    reservedamount integer NOT NULL DEFAULT 0,
    CONSTRAINT eventticketcapacity_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventtype
(
    id integer NOT NULL DEFAULT nextval('eventtype_id_seq'::regclass),
    type character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT eventtype_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.eventvenue
(
    id integer NOT NULL DEFAULT nextval('eventvenue_id_seq'::regclass),
    eventid integer NOT NULL,
    venueid integer NOT NULL,
    CONSTRAINT eventvenue_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organization
(
    id integer NOT NULL DEFAULT nextval('organization_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    type character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT organization_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizationaddress
(
    id integer NOT NULL DEFAULT nextval('organizationaddress_id_seq'::regclass),
    orgid integer NOT NULL,
    buildingnumber integer,
    streetname character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default",
    CONSTRAINT organizationaddress_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizationcontact
(
    id integer NOT NULL DEFAULT nextval('organizationcontact_id_seq'::regclass),
    orgid integer NOT NULL,
    phonenumber character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT organizationcontact_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizer
(
    id integer NOT NULL DEFAULT nextval('organizer_id_seq'::regclass),
    userid integer NOT NULL,
    CONSTRAINT organizer_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizerorganization
(
    id integer NOT NULL DEFAULT nextval('organizerorganization_id_seq'::regclass),
    organizerid integer NOT NULL,
    organizationid integer NOT NULL,
    CONSTRAINT organizerorganization_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.paymentmethod
(
    id integer NOT NULL DEFAULT nextval('paymentmethod_id_seq'::regclass),
    method character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT paymentmethod_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.post
(
    id integer NOT NULL DEFAULT nextval('post_id_seq'::regclass),
    userid integer NOT NULL,
    eventid integer NOT NULL,
    title character varying COLLATE pg_catalog."default",
    description character varying COLLATE pg_catalog."default",
    CONSTRAINT post_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket
(
    id integer NOT NULL DEFAULT nextval('ticket_id_seq'::regclass),
    type integer,
    eventid integer NOT NULL,
    qrcode character varying COLLATE pg_catalog."default",
    seatnumber integer,
    CONSTRAINT ticket_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tickettype
(
    id integer NOT NULL DEFAULT nextval('tickettype_id_seq'::regclass),
    eventid integer NOT NULL,
    price integer NOT NULL,
    CONSTRAINT tickettype_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tickettypeeventseat
(
    id integer NOT NULL DEFAULT nextval('tickettypeeventseat_id_seq'::regclass),
    eventid integer NOT NULL,
    tickettypeid integer NOT NULL,
    seatnumber integer,
    CONSTRAINT tickettypeeventseat_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transactions
(
    id integer NOT NULL DEFAULT nextval('transactions_id_seq'::regclass),
    userid integer NOT NULL,
    ticketid integer NOT NULL,
    paymentmethod integer,
    CONSTRAINT transactions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    phonenumber character varying COLLATE pg_catalog."default" NOT NULL,
    firstname character varying COLLATE pg_catalog."default" NOT NULL,
    lastname character varying COLLATE pg_catalog."default" NOT NULL,
    type character varying COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT user_email UNIQUE (email),
    CONSTRAINT user_password UNIQUE (password),
    CONSTRAINT user_phonenumber UNIQUE (phonenumber)
);

CREATE TABLE IF NOT EXISTS public.venue
(
    id integer NOT NULL DEFAULT nextval('venue_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    capacity integer,
    description character varying COLLATE pg_catalog."default",
    createdby character varying COLLATE pg_catalog."default" NOT NULL,
    buildingnumber integer,
    streetname character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default",
    CONSTRAINT venue_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.venuecontact
(
    id integer NOT NULL DEFAULT nextval('venuecontact_id_seq'::regclass),
    venueid integer NOT NULL,
    contactid integer NOT NULL,
    CONSTRAINT venuecontact_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.venuerestriction
(
    id integer NOT NULL DEFAULT nextval('venuerestriction_id_seq'::regclass),
    venueid integer NOT NULL,
    restriction character varying COLLATE pg_catalog."default",
    CONSTRAINT venuerestriction_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.administrator
    ADD CONSTRAINT administrator_orgid_fkey FOREIGN KEY (orgid)
    REFERENCES public.organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.administrator
    ADD CONSTRAINT administrator_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.attendee
    ADD CONSTRAINT attendee_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventfeedback
    ADD CONSTRAINT eventfeedback_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventfeedback
    ADD CONSTRAINT eventfeedback_userid_fkey FOREIGN KEY ("attendeeID")
    REFERENCES public.attendee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventhost
    ADD CONSTRAINT eventhost_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventhost
    ADD CONSTRAINT eventhost_hostid_fkey FOREIGN KEY (hostid)
    REFERENCES public.organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_status_fkey FOREIGN KEY (status)
    REFERENCES public.eventstatus (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_type_fkey FOREIGN KEY (type)
    REFERENCES public.eventtype (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventticketcapacity
    ADD CONSTRAINT eventticketcapacity_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventticketcapacity
    ADD CONSTRAINT eventticketcapacity_tickettype_fkey FOREIGN KEY (tickettype)
    REFERENCES public.tickettype (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventvenue
    ADD CONSTRAINT eventvenue_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventvenue
    ADD CONSTRAINT eventvenue_venueid_fkey FOREIGN KEY (venueid)
    REFERENCES public.venue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizationaddress
    ADD CONSTRAINT organizationaddress_orgid_fkey FOREIGN KEY (orgid)
    REFERENCES public.organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizationcontact
    ADD CONSTRAINT organizationcontact_orgid_fkey FOREIGN KEY (orgid)
    REFERENCES public.organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizer
    ADD CONSTRAINT organizer_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizerorganization
    ADD CONSTRAINT organizerorganization_organizationid_fkey FOREIGN KEY (organizationid)
    REFERENCES public.organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizerorganization
    ADD CONSTRAINT organizerorganization_organizerid_fkey FOREIGN KEY (organizerid)
    REFERENCES public.organizer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT post_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT post_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.administrator (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ticket
    ADD CONSTRAINT ticket_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ticket
    ADD CONSTRAINT ticket_type_fkey FOREIGN KEY (type)
    REFERENCES public.tickettype (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tickettype
    ADD CONSTRAINT tickettype_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tickettypeeventseat
    ADD CONSTRAINT tickettypeeventseat_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tickettypeeventseat
    ADD CONSTRAINT tickettypeeventseat_tickettypeid_fkey FOREIGN KEY (tickettypeid)
    REFERENCES public.tickettype (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_paymentmethod_fkey FOREIGN KEY (paymentmethod)
    REFERENCES public.paymentmethod (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.attendee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.venuecontact
    ADD CONSTRAINT venuecontact_contactid_fkey FOREIGN KEY (contactid)
    REFERENCES public.contactperson (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.venuecontact
    ADD CONSTRAINT venuecontact_venueid_fkey FOREIGN KEY (venueid)
    REFERENCES public.venue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.venuerestriction
    ADD CONSTRAINT venuerestriction_venueid_fkey FOREIGN KEY (venueid)
    REFERENCES public.venue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;